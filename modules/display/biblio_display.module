<?php

function biblio_display_menu() {
    $items = array();
    $items['admin/config/drupac/display'] = array(
        'title' => 'Drupac displaying settings',
        'description' =>  'Set up displaying of druapc record',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('biblio_display_admin_settings_form'),
        'file' => 'biblio_display.admin.inc',
        'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
    );
	$items['admin/config/drupac/display/%'] = array(
        'description' =>  'Field configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('biblio_display_admin_theme_fields_form', 4),
        'file' => 'biblio_display.admin.inc',
        'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
    );
    return $items;
}

function biblio_display_theme() {
	$theme = 'simple';
	return array(
		'bibliorecord' => array(
			'render element' => 'elements',
			'template' => 'themes/' . $theme . '/node--biblio-record',
		),
    	'biblio_display_admin_theme_fields_form' => array(
      		'template' => 'biblio-display-admin-display-form',
      		'file' => 'biblio_display.admin.inc',
      		'render element' => 'form',
    	),
	);
}

function biblio_display_node_view_alter(&$build) {
	if ($build['#bundle'] == 'biblio_record') {
		$build['#theme'] = 'bibliorecord';
	}
}

function biblio_display_preprocess_bibliorecord(&$variables) {
	template_preprocess_node($variables);
	$title = $variables['title'];
	$themedata = biblio_display_get_theme_file();

	foreach ($themedata['field'] as $fieldname => $region) {
		if ( isset($variables['content'][$fieldname]) ) {
			$variables[$region][$fieldname] = $variables['content'][$fieldname];
		}
	}
}

function biblio_record_field_attach_view_alter(&$output, $context) {
	if ( array_key_exists('biblio_record_author', $output) ) {
		$output['biblio_record_author']['#theme'] = 'authorfield';
	}
}

function theme_authorfield($variables) {
  $output = '<h1>By ' . $variables['elements']['#items']['0']['safe_value'] . '</h1>';
  return $output;
}

function biblio_display_init() {
    drupal_add_css(drupal_get_path('module', 'biblio_display') . '/themes/simple/biblio.css');
}

function biblio_display_get_theme_file($theme_name = 'simple') {
	$filename = drupal_get_path('module', 'biblio_display') . '/themes/' . $theme_name .'/' . $theme_name . '.info';
	return drupal_parse_info_file($filename);
}

function biblio_display_get_theme_config($theme_name) {
	$fields = field_info_instances('node', 'biblio_record');
	$result = db_query("SELECT fieldname, region FROM {biblio_display_fields_regions} WHERE themename='$theme_name'");
	$fields_region = array();
	while ($record = $result->fetchAssoc()) {
		$fields_region[ $record['fieldname'] ] = $record['region'];
	}

	$config['fields'] = array();
	foreach ( $fields as $name => $values) {
		$config['fields'][ $name ]['label'] = $values['label'];
		if ( isset($fields_region[ $name ]) ) {
			$config['fields'][ $name ]['region'] = $fields_region[$name];
		} else {
			$config['fields'][ $name ]['region'] = 'none';
		}
	}
	$theme_file = biblio_display_get_theme_file($theme_name);
	$config['regions'] = $theme_file['regions'];
	$config['regions']['none'] = 'None';
	return $config;
}

function biblio_display_get_availables_themes() {
	global $base_url;
	$base_dir = drupal_get_path('module', 'biblio_display') . '/themes';
	$dir = opendir($base_dir);

	$themes_list = array();
	$folders = array();

	while($element = readdir($dir)) {
		if($element != '.' && $element != '..') {
			if (is_dir($base_dir.'/'.$element)) {
				$folders[] = $element;
			}
		}
	}
	closedir($dir);
	if ( count($folders) ) {
		foreach ( $folders as $theme ) {
			$config = array();
			$config = biblio_display_get_theme_file($theme);
			$themes_list[ $theme ] = array (
				'theme_name' => $config['name'],
				'configure'  => '<a href="' . $base_url . '/admin/config/drupac/display/' . $theme . '">configure</a>'
			);
		}
	}
	return $themes_list;
}
